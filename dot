#!/usr/bin/env bash

set -e

# dotfiles management script
# provides commands: init, add, remove, list, cleanup

DOTFILES_DIR="$HOME/.dotfiles"
BREWFILE="$DOTFILES_DIR/Brewfile"

# source shared logging utilities
source "$DOTFILES_DIR/utils/log.sh"

# check if running on macos
check_macos() {
    if [[ "$OSTYPE" != "darwin"* ]]; then
        log_error "this script is designed for macos only"
        exit 1
    fi
}

# install homebrew if not present
install_homebrew() {
    if ! command -v brew &> /dev/null; then
        log_info "installing homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # add homebrew to path for apple silicon macs
        if [[ $(uname -m) == "arm64" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi

        log_success "homebrew installed successfully"
    else
        log_info "homebrew is already installed"
    fi
}

# check if stow is installed
check_stow() {
    if ! command -v stow &> /dev/null; then
        log_info "gnu stow not found, installing..."
        brew install stow
    fi
}

# install oh-my-zsh if not present
install_oh_my_zsh() {
    local zsh_config_dir="$HOME/.dotfiles/.zsh"
    local oh_my_zsh_dir="$zsh_config_dir/.oh-my-zsh"

    # create config directory if it doesn't exist
    mkdir -p "$zsh_config_dir"

    if [[ ! -d "$oh_my_zsh_dir" ]]; then
        log_info "installing oh-my-zsh to $oh_my_zsh_dir..."
        git clone https://github.com/ohmyzsh/ohmyzsh.git "$oh_my_zsh_dir"
        log_success "oh-my-zsh installed successfully"
    else
        log_info "oh-my-zsh is already installed"
    fi

    # install zsh-autosuggestions plugin
    local autosuggestions_dir="$oh_my_zsh_dir/custom/plugins/zsh-autosuggestions"
    if [[ ! -d "$autosuggestions_dir" ]]; then
        log_info "installing zsh-autosuggestions plugin..."
        git clone https://github.com/zsh-users/zsh-autosuggestions "$autosuggestions_dir"
        log_success "zsh-autosuggestions plugin installed successfully"
    else
        log_info "zsh-autosuggestions plugin is already installed"
    fi
}

# setup dot command globally
setup_dot_command() {
    local dotfiles_dir="$HOME/.dotfiles"
    local dot_script="$dotfiles_dir/dot"

    # make sure the script is executable
    chmod +x "$dot_script"

    # add to path in shell config files
    local shell_configs=("$HOME/.zshrc" "$HOME/.bash_profile" "$HOME/.bashrc")
    local path_line='export PATH="$HOME/.dotfiles/bin:$PATH"'

    for config in "${shell_configs[@]}"; do
        if [[ -f "$config" ]]; then
            if ! grep -q "\.dotfiles/bin" "$config"; then
                echo "" >> "$config"
                echo "# dotfiles management" >> "$config"
                echo "$path_line" >> "$config"
                log_info "added dotfiles bin to path in $(basename "$config")"
            fi
        fi
    done

    # add to current session
    export PATH="$HOME/.dotfiles/bin:$PATH"

    log_success "dot command is now available globally"
}



# install all packages from brewfile
install_packages() {
    log_info "installing packages from brewfile..."
    cd "$DOTFILES_DIR"

    if [[ -f "$BREWFILE" ]]; then
        brew bundle install --verbose
        log_success "all packages installed successfully"
    else
        log_error "brewfile not found at $BREWFILE"
        exit 1
    fi
}

# stow all dotfiles
stow_dotfiles() {
    log_info "stowing configuration files"

    if ! command -v stow &> /dev/null; then
        log_error "gnu stow is not installed"
        log_info "please install stow via homebrew: brew install stow"
        return 1
    fi

    local home_dir="${DOTFILES_DIR}/home"

    if [[ ! -d "$home_dir" ]]; then
        log_error "home directory not found at $home_dir"
        log_info "please create a 'home' directory containing your dotfiles"
        return 1
    fi

    log_info "stowing files from ${home_dir} to ${HOME}..."

    if stow -R -v \
            --ignore='\.DS_Store' \
            --ignore='\.git' \
            --ignore='\.gitignore' \
            --ignore='\.gitmodules' \
            --ignore='README\.md' \
            --ignore='LICENSE' \
            -d "${DOTFILES_DIR}" \
            -t "${HOME}" home; then
        log_success "dotfiles stowed successfully"
    else
        log_error "failed to stow dotfiles"
        return 1
    fi
}

# run macos defaults
setup_macos() {
    if [[ -f "$DOTFILES_DIR/macos/defaults.sh" ]]; then
        log_info "applying macos defaults..."
        bash "$DOTFILES_DIR/macos/defaults.sh"
    fi
}

# add package to brewfile
add_package() {
    local package="$1"
    local type="$2"

    if [[ -z "$package" ]]; then
        log_error "package name is required"
        exit 1
    fi

    # determine the brew command and brewfile entry
    case "$type" in
        cask)
            entry="cask \"$package\""
            install_cmd="brew install --cask $package"
            ;;
        tap)
            entry="tap \"$package\""
            install_cmd="brew tap $package"
            ;;
        mas)
            log_error "mas apps require an id. use: dot add \"App Name\" mas <id>"
            echo "example: dot add \"Xcode\" mas 497799835"
            exit 1
            ;;
        *)
            entry="brew \"$package\""
            install_cmd="brew install $package"
            ;;
    esac

    # check if already in brewfile
    if grep -Fq "\"$package\"" "$BREWFILE"; then
        log_warning "$package is already in the brewfile"
        return
    fi

    # install the package first
    log_info "installing $package..."
    if $install_cmd; then
        # add to brewfile
        echo "$entry" >> "$BREWFILE"
        log_success "$package added to brewfile and installed"
    else
        log_error "failed to install $package"
        exit 1
    fi
}

# add mas app with id
add_mas_app() {
    local app_name="$1"
    local app_id="$2"

    if [[ -z "$app_name" || -z "$app_id" ]]; then
        log_error "both app name and id are required for mas apps"
        echo "usage: dot add \"App Name\" mas <id>"
        echo "find app ids with: mas search \"App Name\""
        exit 1
    fi

    local entry="mas \"$app_name\", id: $app_id"
    local install_cmd="mas install $app_id"

    # check if already in brewfile
    if grep -Fq "\"$app_name\"" "$BREWFILE"; then
        log_warning "$app_name is already in the brewfile"
        return
    fi

    # install the app
    log_info "installing $app_name..."
    if $install_cmd; then
        echo "$entry" >> "$BREWFILE"
        log_success "$app_name added to brewfile and installed"
    else
        log_error "failed to install $app_name"
        exit 1
    fi
}

# remove package from brewfile
remove_package() {
    local package="$1"
    local type="$2"

    if [[ -z "$package" ]]; then
        log_error "package name is required"
        exit 1
    fi

    # determine uninstall command
    case "$type" in
        cask)
            uninstall_cmd="brew uninstall --cask $package"
            ;;
        tap)
            uninstall_cmd="brew untap $package"
            ;;
        mas)
            log_warning "mas apps cannot be automatically uninstalled"
            log_info "please uninstall $package manually from applications folder"
            uninstall_cmd="true"  # no-op command
            ;;
        *)
            uninstall_cmd="brew uninstall $package"
            ;;
    esac

    # check if in brewfile
    if ! grep -Fq "\"$package\"" "$BREWFILE"; then
        log_warning "$package is not in the brewfile"
        return
    fi

    # remove the package
    log_info "removing $package..."
    if $uninstall_cmd; then
        # remove from brewfile (escape special characters for sed)
        local escaped_package=$(echo "$package" | sed 's/[[\.*^$()+?{|]/\\&/g')
        sed -i.bak "/\"$escaped_package\"/d" "$BREWFILE"
        rm "$BREWFILE.bak"
        log_success "$package removed from brewfile and uninstalled"
    else
        log_error "failed to remove $package"
        exit 1
    fi
}

# list all packages from brewfile
list_packages() {
    if [[ ! -f "$BREWFILE" ]]; then
        log_error "brewfile not found"
        exit 1
    fi

    echo -e "\n${BLUE}homebrew taps:${NC}"
    grep '^tap ' "$BREWFILE" | sed 's/tap "//g; s/"//g' | sed 's/^/  /' || echo "  (none)"

    echo -e "\n${BLUE}homebrew packages:${NC}"
    grep '^brew ' "$BREWFILE" | sed 's/brew "//g; s/"//g' | sed 's/^/  /' || echo "  (none)"

    echo -e "\n${BLUE}homebrew casks:${NC}"
    grep '^cask ' "$BREWFILE" | sed 's/cask "//g; s/"//g' | sed 's/^/  /' || echo "  (none)"

    echo -e "\n${BLUE}mac app store apps:${NC}"
    grep '^mas ' "$BREWFILE" | sed 's/mas "//g; s/", id:.*//g' | sed 's/^/  /' || echo "  (none)"

    echo
}

# cleanup unused packages
cleanup_packages() {
    log_info "cleaning up packages not in brewfile..."
    cd "$DOTFILES_DIR"

    if [[ -f "$BREWFILE" ]]; then
        brew bundle cleanup --force
        log_success "cleanup complete"
    else
        log_error "brewfile not found"
        exit 1
    fi
}

# dump current brew state to brewfile
dump_brewfile() {
    log_info "generating brewfile from current brew installation..."
    cd "$DOTFILES_DIR"

    brew bundle dump --force --describe
    log_success "brewfile updated with current packages"
    log_info "you can now use 'dot cleanup' to remove any unwanted packages"
}

# show help
show_help() {
    cat << EOF

dot: .dotfiles tool

usage: dot <command> [options]

commands:
    init                        initialize dotfiles (install all packages, stow configs, setup macos)
    add <package> [type]        add and install a package (type: brew, cask, tap, mas)
    add <name> mas <id>         add mac app store app with id
    remove <package> [type]     remove and uninstall a package
    list                        list all managed packages from brewfile
    cleanup                     remove packages not in brewfile (brew bundle cleanup)
    dump                        generate brewfile from currently installed packages
    help                        show this help message

examples:
    dot init
    dot add git
    dot add docker cask
    dot add homebrew/cask-fonts tap
    dot add "Xcode" mas 497799835
    dot remove git
    dot remove docker cask
    dot list
    dot cleanup
    dot dump

brewfile location: $BREWFILE

EOF
}

# main command processing
case "${1:-help}" in
    init)
        check_macos
        install_homebrew
        setup_dot_command
        install_oh_my_zsh
        check_stow
        install_packages
        stow_dotfiles
        setup_macos

        cat << 'EOF'

╔═══════════════════════════════════════════════════════════╗
║                   initialization complete!                ║
╠═══════════════════════════════════════════════════════════╣
║                                                           ║
║  your dotfiles system is now ready!                       ║
║                                                           ║
║  the 'dot' command is now available globally.             ║
║                                                           ║
║  next steps:                                              ║
║  • restart your terminal or run: source ~/.zshrc          ║
║  • customize your brewfile: vim ~/.dotfiles/Brewfile      ║
║  • run 'dot cleanup' to remove unwanted packages          ║
║                                                           ║
║  available commands:                                      ║
║  • dot add <package>     - add package to brewfile        ║
║  • dot remove <package>  - remove package                 ║
║  • dot list              - list all packages              ║
║  • dot cleanup           - remove unlisted packages       ║
║  • dot dump              - generate brewfile from system  ║
║                                                           ║
╚═══════════════════════════════════════════════════════════╝

EOF
        log_success "dotfiles initialization complete!"
        ;;
    add)
        check_macos
        install_homebrew
        if [[ "$3" == "mas" && -n "$4" ]]; then
            add_mas_app "$2" "$4"
        else
            add_package "$2" "$3"
        fi
        ;;
    remove)
        check_macos
        install_homebrew
        remove_package "$2" "$3"
        ;;
    list)
        list_packages
        ;;
    cleanup)
        check_macos
        install_homebrew
        cleanup_packages
        ;;
    dump)
        check_macos
        install_homebrew
        dump_brewfile
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        log_error "unknown command: $1"
        echo
        show_help
        exit 1
        ;;
esac
